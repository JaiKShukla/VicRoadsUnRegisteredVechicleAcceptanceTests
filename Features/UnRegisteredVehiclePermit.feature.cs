// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TestFrameWork.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Verify the user can apply for unregistered vehicle permits")]
    [NUnit.Framework.CategoryAttribute("UnRegisteredVechilePermit")]
    public partial class VerifyTheUserCanApplyForUnregisteredVehiclePermitsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = new string[] {
                "UnRegisteredVechilePermit"};
        
#line 1 "UnRegisteredVehiclePermit.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Verify the user can apply for unregistered vehicle permits", "\tAs a vicroads user\r\n\tI want to apply for unregisted vehicle permits\r\n\tso that ve" +
                    "hicle permits can be registered", ProgrammingLanguage.CSharp, new string[] {
                        "UnRegisteredVechilePermit"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the user can apply for unregistered vehicle permits for Passenger Vehicle")]
        [NUnit.Framework.TestCaseAttribute("PassengerVehicle", "Sedan", "61A BolingBroke Street Pascoe Vale Vic 3044", "today", "1 day", null)]
        [NUnit.Framework.TestCaseAttribute("PassengerVehicle", "Station Wagon", "61B BolingBroke Street Pascoe Vale Vic 3044", "today", "2 days", null)]
        public virtual void VerifyTheUserCanApplyForUnregisteredVehiclePermitsForPassengerVehicle(string vechicleType, string passengerVechicleType, string address, string permitStartDate, string permitDuration, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("vechicleType", vechicleType);
            argumentsOfScenario.Add("passengerVechicleType", passengerVechicleType);
            argumentsOfScenario.Add("address", address);
            argumentsOfScenario.Add("permitStartDate", permitStartDate);
            argumentsOfScenario.Add("permitDuration", permitDuration);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the user can apply for unregistered vehicle permits for Passenger Vehicle", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given("the user is on Unregistered Vehicle Permit application form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Vehicle Type",
                            "Passenger Vehicle Type",
                            "Address",
                            "Permit Start Date",
                            "Permit Duration"});
                table1.AddRow(new string[] {
                            string.Format("{0}", vechicleType),
                            string.Format("{0}", passengerVechicleType),
                            string.Format("{0}", address),
                            string.Format("{0}", permitStartDate),
                            string.Format("{0}", permitDuration)});
#line 10
  testRunner.When("the user registers the vehicle with these details", ((string)(null)), table1, "When ");
#line hidden
#line 14
 testRunner.Then("the user can proceed to Select Permit Type option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the user can apply for unregistered vehicle permits for Goods Carrying Veh" +
            "icle")]
        [NUnit.Framework.TestCaseAttribute("GoodsCarryingVehicle", "2 tonnes or less", "61A BolingBroke Street Pascoe Vale Vic 3044", "today", "1 day", null)]
        public virtual void VerifyTheUserCanApplyForUnregisteredVehiclePermitsForGoodsCarryingVehicle(string vechicleType, string carryingCapacity, string address, string permitStartDate, string permitDuration, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("vechicleType", vechicleType);
            argumentsOfScenario.Add("carryingCapacity", carryingCapacity);
            argumentsOfScenario.Add("address", address);
            argumentsOfScenario.Add("permitStartDate", permitStartDate);
            argumentsOfScenario.Add("permitDuration", permitDuration);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the user can apply for unregistered vehicle permits for Goods Carrying Veh" +
                    "icle", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
 testRunner.Given("the user is on Unregistered Vehicle Permit application form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Vehicle Type",
                            "CarryingCapacity",
                            "Address",
                            "Permit Start Date",
                            "Permit Duration"});
                table2.AddRow(new string[] {
                            string.Format("{0}", vechicleType),
                            string.Format("{0}", carryingCapacity),
                            string.Format("{0}", address),
                            string.Format("{0}", permitStartDate),
                            string.Format("{0}", permitDuration)});
#line 23
  testRunner.When("the user registers the vehicle with these details", ((string)(null)), table2, "When ");
#line hidden
#line 27
 testRunner.Then("the user can proceed to Select Permit Type option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the user can apply for unregistered vehicle permits for Prime Mover")]
        [NUnit.Framework.TestCaseAttribute("PrimeMover", "61A BolingBroke Street Pascoe Vale Vic 3044", "today", "2 days", null)]
        public virtual void VerifyTheUserCanApplyForUnregisteredVehiclePermitsForPrimeMover(string vechicleType, string address, string permitStartDate, string permitDuration, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("vechicleType", vechicleType);
            argumentsOfScenario.Add("address", address);
            argumentsOfScenario.Add("permitStartDate", permitStartDate);
            argumentsOfScenario.Add("permitDuration", permitDuration);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the user can apply for unregistered vehicle permits for Prime Mover", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 34
 testRunner.Given("the user is on Unregistered Vehicle Permit application form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Vehicle Type",
                            "Address",
                            "Permit Start Date",
                            "Permit Duration"});
                table3.AddRow(new string[] {
                            string.Format("{0}", vechicleType),
                            string.Format("{0}", address),
                            string.Format("{0}", permitStartDate),
                            string.Format("{0}", permitDuration)});
#line 35
  testRunner.When("the user registers the vehicle with these details", ((string)(null)), table3, "When ");
#line hidden
#line 39
 testRunner.Then("the user can proceed to Select Permit Type option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the user can apply for unregistered vehicle permits for Motor Cycle")]
        [NUnit.Framework.TestCaseAttribute("Motorcycle", "Less than 61 cc", "61A BolingBroke Street Pascoe Vale Vic 3044", "today", "1 day", null)]
        public virtual void VerifyTheUserCanApplyForUnregisteredVehiclePermitsForMotorCycle(string vechicleType, string engineCapacity, string address, string permitStartDate, string permitDuration, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("vechicleType", vechicleType);
            argumentsOfScenario.Add("engineCapacity", engineCapacity);
            argumentsOfScenario.Add("address", address);
            argumentsOfScenario.Add("permitStartDate", permitStartDate);
            argumentsOfScenario.Add("permitDuration", permitDuration);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the user can apply for unregistered vehicle permits for Motor Cycle", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 45
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 46
 testRunner.Given("the user is on Unregistered Vehicle Permit application form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Vehicle Type",
                            "EngineCapacity",
                            "Address",
                            "Permit Start Date",
                            "Permit Duration"});
                table4.AddRow(new string[] {
                            string.Format("{0}", vechicleType),
                            string.Format("{0}", engineCapacity),
                            string.Format("{0}", address),
                            string.Format("{0}", permitStartDate),
                            string.Format("{0}", permitDuration)});
#line 47
  testRunner.When("the user registers the vehicle with these details", ((string)(null)), table4, "When ");
#line hidden
#line 51
 testRunner.Then("the user can proceed to Select Permit Type option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the user can apply for unregistered vehicle permits for Trailer/Caravan")]
        [NUnit.Framework.TestCaseAttribute("Trailer", "61A BolingBroke Street Pascoe Vale Vic 3044", "today", "1 day", null)]
        public virtual void VerifyTheUserCanApplyForUnregisteredVehiclePermitsForTrailerCaravan(string vechicleType, string address, string permitStartDate, string permitDuration, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("vechicleType", vechicleType);
            argumentsOfScenario.Add("address", address);
            argumentsOfScenario.Add("permitStartDate", permitStartDate);
            argumentsOfScenario.Add("permitDuration", permitDuration);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the user can apply for unregistered vehicle permits for Trailer/Caravan", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 57
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 58
 testRunner.Given("the user is on Unregistered Vehicle Permit application form", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Vehicle Type",
                            "Address",
                            "Permit Start Date",
                            "Permit Duration"});
                table5.AddRow(new string[] {
                            string.Format("{0}", vechicleType),
                            string.Format("{0}", address),
                            string.Format("{0}", permitStartDate),
                            string.Format("{0}", permitDuration)});
#line 59
  testRunner.When("the user registers the vehicle with these details", ((string)(null)), table5, "When ");
#line hidden
#line 63
 testRunner.Then("the user can proceed to Select Permit Type option", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
